services:

  nginx:
    container_name: nginx
    build: 
      context: .docker/
      dockerfile: nginx.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "${FORWARD_NGINX_PORT:-80}:80"
    volumes:
      - ./backend:/var/www/html:delegated
    depends_on:
      - php
      - postgresql
    networks:
      - ecommerce
    restart: unless-stopped

  php:
    container_name: "php"
    build: 
      context: .docker/
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "${FORWARD_PHP_PORT:-9000}:9000"
    volumes:
      - ./backend:/var/www/html:delegated
      - ./.docker/configs/custom.ini:/usr/local/etc/php/conf.d/custom.ini
    networks:
      - ecommerce
    restart: unless-stopped

  postgresql:
    container_name: "postgresql"
    image: postgres:16.2
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /data/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - .docker/postgresql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - .docker/postgresql/data:/data/postgres
    ports:
      - "${FORWARD_DB_PORT:-5432}:5432"
    networks:
      - ecommerce
    restart: unless-stopped

  adminer:
    container_name: adminer
    image: adminer
    ports:
      - "${FORWARD_ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_SERVER: postgresql
      ADMINER_DEFAULT_DB_NAME: ${DB_DATABASE}
    depends_on:
      - postgresql
    networks:
      - ecommerce
    restart: always
  
  composer:
    container_name: "composer"
    build: 
      context: .docker/
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    volumes:
      - ./backend:/var/www/html
    depends_on:
      - php
    entrypoint: ["composer", "--ignore-platform-reqs"]
    networks:
      - ecommerce


volumes:
  postgresql:
    driver: local


networks:

  ecommerce:
    driver: bridge
